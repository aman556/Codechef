#include iostream
#includebitsstdc++.h
using namespace std;
int par[200001],siz[200001];
int root(int i)
{
    while(par[ i ] != i)           
    {
     i = par[ i ];
    }
    return i;
}
 
void weighted_union(int A,int B)
{
    int root_A = root(A);
    int root_B = root(B);
    if(siz[root_A] = siz[root_B ] && root_B!=B)
    {
par[ root_A ] = par[root_B];
siz[root_B] += siz[root_A];
}
    else
    {
par[ root_B ] = par[root_A];
siz[root_A] += siz[root_B];
}
 
}
int main()
{
  int n;
  cinn;
  string s;
  
  vectorsetint v(26);
  for(int i=0;in;i++){
        par[i]=i;
        cins;
        for(int j=0;js.length();j++)
        v[s[j]-(int)'a'].insert(i);
  }
  for(int i=0;i26;i++)
  {
      
      for(auto it=v[i].begin();it!=v[i].end();it++){
          cout(it) ((v[i].begin()))endl;
          
          if(it!=v[i].begin()){
          weighted_union(((v[i].begin())),(it));
          cout((v[i].begin())) (it)endl;
          for(int i=0;in;i++){coutpar[i] ;
        
  }coutendl;
          coutpar[(it)] par[((v[i].begin()))]endl;
      }
      }
  }    
  setint st;
  for(int i=0;in;i++){coutpar[i] ;
        if(par[par[i]]!=par[i])
            par[i]=par[par[i]];
        st.insert(par[i]);
  }
  coutst.size();
   return 0;
}