//DP solution but give TLE
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
long long int a[200001];
long long dp[200001];
long long int n,s=0,m=1;

int main()
{
   
   cin>>n;
  
   for(int i=0;i<n;i++){
        cin>>a[i];
   }
   
   dp[0]=1;
  for(int i=1;i<n;i++){
      dp[i]=1;
      for(int j=0;j<i;j++){
          if(a[i]>a[j]){
            dp[i]=max(dp[i],dp[j]+1);
          
              m=max(m,dp[i]);
          }
      }
  }
   cout<<m;
   return 0;
}

//Effecient one
#include <bits/stdc++.h>
using namespace std;
 
int main() {
  int n;
  cin >> n;
  vector<int> dp;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    auto it = lower_bound(dp.begin(), dp.end(), x);
    if (it == dp.end()) {
      dp.push_back(x);
    } else {
      *it = x;
    }
  }
  cout << dp.size() << endl;
}